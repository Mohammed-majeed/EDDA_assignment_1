birthweight = read.table(file = "birthweight.txt", header = TRUE)
data= birthweight$birthweight
qqnorm(data, main = "Normal Q-Q Plot of Birthweight")
qqline(data,col=" red ")
# Check for normality with histogram
hist(x = data,breaks=15,main = "Histogram of Birthweights",
xlab = " Birthweight ",freq = FALSE)
lines(x= density(x= data), col=" red ")
# Check for normality with boxplot
boxplot (data , main =" Boxplot of Birthweight ",
xlab =" Birthweight ")#horizontal = TRUE)
shapiro.test(data)
# construct Confidence Interval
mu <- mean(data)
stnd <-sd(data)
CI <- 0.96
alpha <- 1-CI
# Calculate the margin of error for a 95% confidence interval
z <- qnorm(1 - alpha/2) # 98th percentile of standard normal distribution
# Calculate the margin of error
me <- z * stnd / sqrt(length(data))
# Calculate the confidence interval
lower_ci = mu - me
upper_ci = mu + me
# Print the confidence interval
cat("Confidence Interval: [", lower_ci, ", ", upper_ci, "]", sep = "")
# construct a bounded 96%-CI for mu(mean)
for (sample_size in 1:1000) {
lower_bound = mu - z*stnd/sqrt(sample_size)
upper_bound = mu + z*stnd/sqrt(sample_size)
CI_length <- upper_bound - lower_bound
if (CI_length <= 100) {
break
}
}
cat("sample_size",sample_size)
# Compute a bootstrap 96%-CI for mu and compare it to the above CI.
library(boot)
B <- 1000 # Choose number of bootstrap resamples
boot_data <- boot(data, statistic = function(data, i) mean(data[i]), R = B)
boot_ci <- boot.ci(boot_data, type = "perc", conf = 0.96)
lower_bound_boot_ci <- boot_ci$percent[[4]]
upper_bound_boot_ci <- boot_ci$percent[[5]]
cat("boot_CI Confidence Interval: [", lower_bound_boot_ci, ", ", upper_bound_boot_ci, "]", sep = "")
# Verify this claim by using a one side t-test
t.test(data, mu = 2800, alternative = "less")
# sign test
binom.test(sum(data > 2800), n=length(data), p = 0.5, alternative = "less")
B = 100; n = 50
psign = numeric(B) # will contain P-values of sign test
pttest = numeric(B) # will contain P-values of T test
for(i in 1:B) {
x = sample(data, n)
pttest[i] = t.test(x, mu=2800, alt='less')[[3]] # extract P-value
psign[i] = binom.test(sum(x>2800), n, alt='less')[[3]] # extract P-value
}
power_ttest = sum(pttest<0.05)/B
power_sign = sum(psign<0.05)/B
cat("the powers of the t-test: ", power_ttest, ",  the powers of the sing test: ", power_sign, sep = "")
# Set the number of samples to take and the lower probability
n_samples = 100
p_left = 0.25
# Create an empty vector to store the sample probabilities
sample_probabilities = numeric(n_samples)
# Take n_samples samples of size n_samples from the birthweight vector
# Calculate the proportion of samples that have a weight less than 2600 grams
# Store the sample proportion in the sample_probabilities vector
for(i in 1:n_samples){
sample = sample(data, n_samples, replace = TRUE)
sample_probabilities[i] = sum(sample < 2600)/n_samples
}
# Calculate the standard deviation of the sample proportions
sample_sd = sd(sample_probabilities)
# Calculate the mean of the sample proportions
p_hat = mean(sample_probabilities)
# margin of error
me = p_hat - p_left
# Calculate the upper confidence interval for p
p_right = p_hat + me
confidence_level = ((me/1.96)*2)-1
cat("Confidence Interval: [", p_left, ", ", p_right, "]","confidence_level: ",confidence_level , sep = "")
male_means = c()
female_means = c()
for (i in 1:1000) {
# Select 34 males and 28 females with birthweight < 2600 g
male_2600 = sample(data< 2600, 34)
female_2600 = sample(data[data < 2600], 28)
# Select 61 males and 65 females with birthweight >= 2600 g
male_others = sample(data[data >= 2600], 61)
female_others = sample(data[data >= 2600], 65)
# Combine the selected males and females with birthweight < 2600 g
males = c(male_2600, male_others)
females = c(female_2600, female_others)
# Calculate the mean birthweight for males and females
male_means = c(male_means, mean(males))
female_means = c(female_means, mean(females))
}
# Calculate the mean of the sample means for males and females
mean(male_means)
mean(female_means)
# Perform a two-sample t-test assuming unequal variances
t.test(male_means, female_means)
summary(cholesterol)
summary(cholesterol)
birthweight = read.table(file = "cholesterol.txt", header = TRUE)
summary(cholesterol)
birthweight = read.table(file = "cholesterol.txt", header = TRUE)
# summary(cholesterol)
# Regression the 2 variables are highly correlated
ggplot(cholesterol, aes(x = Before, y = After8weeks)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Before", y = "After 8 weeks", title = "Scatter plot of cholesterol levels")
install.packages("ggplot2")
birthweight = read.table(file = "cholesterol.txt", header = TRUE)
# summary(cholesterol)
# Regression the 2 variables are highly correlated
ggplot(cholesterol, aes(x = Before, y = After8weeks)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Before", y = "After 8 weeks", title = "Scatter plot of cholesterol levels")
install.packages("ggplot2")
birthweight = read.table(file = "cholesterol.txt", header = TRUE)
# summary(cholesterol)
library(ggplot2)
# Regression the 2 variables are highly correlated
ggplot(cholesterol, aes(x = Before, y = After8weeks)) +
geom_point() +
geom_smooth(method = "lm") +
labs(x = "Before", y = "After 8 weeks", title = "Scatter plot of cholesterol levels")
