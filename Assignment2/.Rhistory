options(digits = 3) #Showing only 3 decimals
library(multcomp)
install.packages("multcomp")
install.packages("tidyverse")
options(digits = 3) #Showing only 3 decimals
library(multcomp)
install.packages("multcomp")
install.packages("lme4")
install.packages("multcomp")
options(digits = 3) #Showing only 3 decimals
library(multcomp)
options(digits = 3) #Showing only 3 decimals
library(multcomp)
gala_data = read.table("gala.txt", header = TRUE)
gala_glm = glm(Species~Area+Elevation+Nearest+Scruz+Adjacent, family= poisson, data = gala_data)
summary(gala_glm)
plot(fitted(gala_glm), residuals(gala_glm))
plot(fitted(galaglm), residuals(galaglm))
galaglm=glm(sqrt(Species)~Area+Elevation+Nearest+Scruz+Adjacent,family=poisson,data=gala_data)
summary(galaglm)
galaglm=glm(sqrt(Species)~Area+Elevation+Scruz+Adjacent,family=poisson,data=gala_data)
summary(galaglm)
galaglm=glm(sqrt(Species)~Area+Elevation+Adjacent,family=poisson,data=gala_data)
summary(galaglm)
plot(fitted(gala_glm), residuals(gala_glm))
plot(fitted(galaglm), residuals(galaglm))
plot(log(fitted(gala_glm)), residuals(gala_glm))
plot(log(fitted(galaglm)), residuals(galaglm))
plot(log(fitted(gala_glm)), residuals(gala_glm, type = "response"))
plot(log(fitted(galaglm)), residuals(galaglm, type = "response"))
round(cooks.distance(galaglm), 2)
plot(cooks.distance(galaglm))
round(cooks.distance(modlog1), 2)
par(mfrow=c(2,3))
for (i in 1:6) hist(gala_data[,i],main=colnames(gala_data)[i],xlab="",ylab="")
pairs(gala_data)
for (i in 1:6) hist(log(gala_data[,i]),main=colnames(gala_data)[i],xlab="",ylab="")
par(mfrow=c(1,1))
pairs(log(gala_data))
modlog=lm(log(Species)~log(Area)+log(Elevation)+log(Nearest)+log(Scruz+1)+log(Adjacent),data=gala_data)
modlog1=step(modlog)
summary(modlog1)
round(cooks.distance(modlog1), 2)
plot(cooks.distance(modlog1))
qqnorm(residuals(modlog1))
plot(residuals(modlog1), fitted(modlog1))
round(cooks.distance(modlog1), 2)
plot(cooks.distance(modlog1))
qqnorm(residuals(modlog1))
plot(residuals(modlog1), fitted(modlog1))
gala_data$logElevation = log(gala_data$Elevation)
gala_data$logArea = log(gala_data$Area)
gala_data$logScruz = log(gala_data$Scruz + 1)
modlog2 = lm(log(Species)~logArea+logElevation+logScruz,data = gala_data)
pairs(gala_data)
round(cor(gala_data[,7:8]),2)
data = read.table(file = "bread.txt", header = TRUE)
I = 3; J = 2; N = 3
rbind(rep(1:I, each = N * J), rep(1:J, N * I), sample(1:(N * I * J)))
hours = data$hours; humidity = data$humidity; environment = data$environment
par(mfrow = c(1, 2))
boxplot(hours~humidity, main = "Boxplot of humidity")
boxplot(hours~environment, main = "Boxplot of environment")
par(mfrow = c(1, 2))
interaction.plot(humidity, environment, hours, main = "Interaction plot of environment")
interaction.plot(environment, humidity, hours, main = "Interaction plot humidity")
aov = lm(hours~environment*humidity)
aov = lm(hours~environment*humidity)
aov = lm(hours~environment*humidity)
qqnorm(aov$residuals)
data = read.table(file = "search.txt", header = TRUE)
data$stud_nr = seq.int(nrow(data))
skill = factor(rep(c("1", "2", "3", "4", "5"), each = 3))
interface = factor(rep(c("1", "2", "3"), each = 5))
stud_time = data$time; stud_nr = data$stud_nr
blk = data.frame(stud_nr, stud_time, skill, interface)
I = 3; J = 5; N = 1
rbind(rep(1:I, each = N * J), rep(1:J, N * I), sample(1:(N * I * J)))
xtabs(data$time~interface, data = data)
xtabs(data$time~interface + skill, data = data)
aov = lm(data$time~interface + skill); anova(aov)
qqnorm(aov$residuals)
friedman.test(data$time, data$skill, data$interface, data$stud_nr, data = data)
aov = lm(time~interface, data = data); anova(aov)
data = read.table(file = "cow.txt", header = TRUE)
data$id = factor(data$id); data$per = factor(data$per)
datalm = lm(data$milk~data$id+data$per+data$treatment, data = data); anova(datalm)
summary(lm(data$milk~data$treatment, data = data))
library(lme4); attach(data)
datalmer = lmer(data$milk~data$treatment+data$order+data$per+(1|data$id), REML = FALSE)
summary(datalmer)
attach(data$cow)
t.test(data$milk[treatment == "A"], data$milk[treatment == "B"], paired = TRUE)
data = read.table(file = "cow.txt", header = TRUE)
data$id = factor(data$id); data$per = factor(data$per)
datalm = lm(data$milk~data$id+data$per+data$treatment, data = data); anova(datalm)
summary(lm(data$milk~data$treatment, data = data))
data = read.table(file = "austen.txt", header = TRUE)
chisq.test(data[,c("Sense", "Emma", "Sand1")])
chisq.test(data[,c("Sense", "Emma", "Sand1")])
chisq.test(data)
residuals(lm(data[,c("Sense", "Emma", "Sand1")]));
residuals(lm(data))
chisq.test(data[,c("Sense", "Emma", "Sand1")])
chisq.test(data)
residuals(lm(data[,c("Sense", "Emma", "Sand2")]));
residuals(lm(data))
chisq.test(data[,c("Sense", "Emma", "Sand1")])
chisq.test(data)
residuals(lm(data[,c("Sense", "Emma", "Sand1")]));
residuals(lm(data))
chisq.test(data[,c("Sense", "Emma", "Sand1")])
chisq.test(data)
residuals(lm(data[,c("Sense", "Emma", "Sand2")]));
residuals(lm(data))
residuals(lm(data[,c("Sense", "Emma", "Sand1")]));
residuals(lm(data))
chisq.test(data[,c("Sense", "Emma", "Sand1")])
chisq.test(data)
residuals(lm(data[,c("Sense", "Emma", "Sand1")]));
residuals(lm(data))
data = read.table(file = "expensescrime.txt", header = TRUE)
datasel = data[,c(2, 3, 4, 5, 6, 7)]
pairs(datasel)
datalm = lm(expend~bad + crime + lawyers + employ + pop, data = datasel)
order(abs(residuals(datalm)))
round(cooks.distance(datalm), 2)
plot(1:51, cooks.distance(datalm), type = "b")
data = read.table(file = "fruitflies.txt", header = TRUE)
data = data[data > 0]
T = median(data)
data = read.table(file = "telephone.txt", header = TRUE)
data = data$Bills
par(mfrow = c(1, 2));
plot(data, ylab = "Bills in euros", main = "Plot of telephone first month bills", cex.main = 0.75);
hist(data, xlab = "Bills in euros", ylab = "Frequency", main = "Histogram of telephone first month bills", cex.main = 0.75);
data = data[data > 0]
T = median(data)
hist(data, prob = T, ylim = c(0, 0.03), main = "Histogram of the density", xlab = "Telephone first month bill", cex.main = 0.75, cex.axis = 0.75, cex.lab = 0.75)
x = seq(0, max(data), length = 200)
lines(x, dexp(x), type = "l", col = "blue", lwd = 2)
n = length(data); B = 200; tstar1 = tstar2 = tstar3 = numeric(B);
for (i in 1:B) {
xstar1 = rexp(n, 0.5); xstar2 = rexp(n, 0.8); xstar3 = rexp(n, 1.0);
tstar1[i] = median(xstar1); tstar2[i] = median(xstar2); tstar3[i] = median(xstar3)}
par(mfrow = c(1, 3))
hist(tstar1, prob = T, main = "Histogram of the density", xlab = "Permutation");
lines(density(tstar1), ylim = c(0, 0.1), col = "blue", lwd = 2);
hist(tstar2, prob = T, main = "Histogram of the density", xlab = "Permutation");
lines(density(tstar2), ylim = c(0, 0.1), col = "blue", lwd = 2);
hist(tstar3, prob = T, main = "Histogram of the density", xlab = "Permutation");
lines(density(tstar3), ylim = c(0, 0.1), col = "blue", lwd = 2);
B = 200
Tstar = numeric(B)
for(i in 1:B) {
Xstar = sample(data, replace = TRUE)
Tstar[i] = median(Xstar)}
Tstar25 = quantile(Tstar, 0.025)
Tstar975 = quantile(Tstar, 0.975)
# sum(Tstar < Tstar25)[1]
T1 = mean(Tstar)
ci = c(2 * T1 - Tstar975, 2 * T1 - Tstar25)
print(ci)
ci_a = numeric(100)
ci_b = numeric(100)
for (j in 1:100) {
B = 200
n = length(data)
tstar = numeric(B)
for (i in 1:B) {
xstar = rexp(n, 0.5);
tstar[i] = median(xstar)}
Tstar25 = quantile(tstar, 0.025)
Tstar975 = quantile(tstar, 0.975)
sum(tstar < Tstar25)[1]
T1 = mean(Tstar)
ci = c(2 * T1 - Tstar975, 2 * T1 - Tstar25)
ci_a[j] = ci[1]
ci_b[j] = ci[2]
}
ci_a = numeric(100)
ci_b = numeric(100)
for (j in 1:100) {
B = 200
n = length(data)
tstar = numeric(B)
for (i in 1:B) {
xstar = rexp(n, 0.5);
tstar[i] = median(xstar)}
Tstar25 = quantile(tstar, 0.025)
Tstar975 = quantile(tstar, 0.975)
sum(tstar < Tstar25)[1]
T1 = mean(Tstar)
ci = c(2 * T1 - Tstar975, 2 * T1 - Tstar25)
ci_a[j] = ci[1]
ci_b[j] = ci[2]
}
mean(ci_a)
mean(ci_b)
ci_a = numeric(100)
ci_b = numeric(100)
for (j in 1:100) {
B = 200
n = length(data)
tstar = numeric(B)
for (i in 1:B) {
xstar = rexp(n, 0.5);
tstar[i] = median(xstar)}
Tstar25 = quantile(tstar, 0.025)
Tstar975 = quantile(tstar, 0.975)
sum(tstar < Tstar25)[1]
T1 = mean(Tstar)
ci = c(2 * T1 - Tstar975, 2 * T1 - Tstar25)
ci_a[j] = ci[1]
ci_b[j] = ci[2]
}
mean(ci_a)
mean(ci_b)
mean(ci_a)
mean(ci_b)
library(BSDA)
SIGN.test(data, y = NULL, md = 40, alternative = "greater", var.equal = TRUE,
conf.level = 0.95)
prop.test(length(data[data < 10]), n = length(data), p = 0.25, alternative = "less",
correct = TRUE)
unlink("Downloads/assignment1_cache", recursive = TRUE)
npklmer= lmer(yield~N+(1|block), REML=FALSE, data=npk)
options(digits = 3) #Showing only 3 decimals
data(npk)
library(lme4); attach(npk)
npklmer= lmer(yield~N+(1|block), REML=FALSE, data=npk)
npklmer2=lmer(yield~(1|block), REML=FALSE, data=npk)
npkmaov=anova(npklmer2, npklmer)
npkmaov
View(modlog)
options(digits=3)r options(digits=3)
library(lme4); attach(npk)
npklmer= lmer(yield~N+(1|block), REML=FALSE, data=npk)
npklmer2=lmer(yield~(1|block), REML=FALSE, data=npk)
npkmaov=anova(npklmer2, npklmer)
npkmaov
library(lme4)
npklmer= lmer(yield~N+(1|block), REML=FALSE, data=npk)
npklmer2=lmer(yield~(1|block), REML=FALSE, data=npk)
npkmaov=anova(npklmer2, npklmer)
npkmaov
twoANOVA <- aov(yield ~ block * factor(N), data = npk)
summary(twoANOVA)
View(modlog)
setwd("~/Documents/GitHub/EDDA_assignment_1/Assignment2")
data = read.table(file = "coups.txt", header = TRUE)
pairs(data[,-1])
glmcoups = glm(miltcoup ~ oligarchy + pollib + parties + pctvote + popn + size + numelec + numregim, family = poisson, data = data)
summary(glmcoups)
glmcoups =glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numelec+numregim, family=poisson, data=data)
summary(glmcoups)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size+numregim, family=poisson, data=data)
summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size+numregim, family=poisson, data=data)
summary(glmcoups2)[[12]][35]
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size+numregim, family=poisson, data=data)
summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size+numregim, family=poisson, data=data)
summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size, family=poisson, data=data)
summary(glmcoups2)
options(digits=3)
data=read.table(file= "coups.txt", header=TRUE)
pairs(data[,-1])
glmcoups=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numelec+numregim, family=poisson, data=data)
summary(glmcoups)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size+numregim, family=poisson, data=data)
summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size, family=poisson, data=data)
summary(glmcoups2)
options(digits=3)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size+numregim, family=poisson, data=data)
#summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size, family=poisson, data=data)
#summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn, family=poisson, data=data)
#summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size, family=poisson, data=data)
summary(glmcoups2)
glmcoups=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numelec+numregim, family=poisson, data=data)
summary(glmcoups)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size+numregim, family=poisson, data=data)
summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn, family=poisson, data=data)
#summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn, family=poisson, data=data)
#summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size, family=poisson, data=data)
#summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size+numregim, family=poisson, data=data)
#summary(glmcoups2) #numregime: 0.4264
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size, family=poisson, data=data)
summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn, family=poisson, data=data)
#summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib++parties+pctvote+popn+size, family=poisson, data=data)
#summary(glmcoups2)
glmcoups=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numelec+numregim, family=poisson, data=data)
summary(glmcoups)
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numregim, family=poisson, data=data)
#summary(glmcoups2) #numregime: 0.4264
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size, family=poisson, data=data)
summary(glmcoups2) #remove size: 0.42138
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn, family=poisson, data=data)
#summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size, family=poisson, data=data)
#summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numregim, family=poisson, data=data)
#summary(glmcoups2) #numregime: 0.4264
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size, family=poisson, data=data)
#summary(glmcoups2) #remove size: 0.42138
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn, family=poisson, data=data)
summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size, family=poisson, data=data)
#summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numregim, family=poisson, data=data)
#summary(glmcoups2) #numregime: 0.4264
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size, family=poisson, data=data)
#summary(glmcoups2) #remove size: 0.42138
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn, family=poisson, data=data)
#summary(glmcoups2) #remove popn: 0.2988
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size, family=poisson, data=data)
summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numregim, family=poisson, data=data)
#summary(glmcoups2) #numregime: 0.4264
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size, family=poisson, data=data)
#summary(glmcoups2) #remove size: 0.42138
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn, family=poisson, data=data)
#summary(glmcoups2) #remove popn: 0.2988
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote, family=poisson, data=data)
summary(glmcoups2)
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size+numregim, family=poisson, data=data)
#summary(glmcoups2) #numregime: 0.4264
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn+size, family=poisson, data=data)
#summary(glmcoups2) #remove size: 0.42138
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote+popn, family=poisson, data=data)
#summary(glmcoups2) #remove popn: 0.2988
glmcoups2=glm(miltcoup~oligarchy+pollib+parties+pctvote, family=poisson, data=data)
#summary(glmcoups2) #remove pctvote: 0.1803
glmcoups2=glm(miltcoup~oligarchy+pollib+parties, family=poisson, data=data)
summary(glmcoups2) #remove pctvote: 0.1803
View(gala_glm)
avg1 =0.25138+0.09262*mean(data$oligarchy)-0.57410*0+0.02206*mean(data$parties)
avg2 =0.25138+0.09262*mean(data$oligarchy)-0.57410*1+0.02206*mean(data$parties)
avg3 =0.25138+0.09262*mean(data$oligarchy)-0.57410*2+0.02206*mean(data$parties)
avg =c(exp(avg1), exp(avg2), exp(avg3))
avg1; avg2; avg3; avg
View(modlog1)
ov = xtabs(Survived~Sex + PClass, data = data)
# install.packages("rms",dependencies = TRUE)
#install.packages("Hmisc")
#
library(ggplot2);
library(Hmisc);
titanic_df <- read.table("titanic.txt", header=TRUE)
s= xtabs(~Survived + PClass + Sex, titanic_df)
plot(xtabs(~Survived + PClass + Sex, titanic_df))
s
# install.packages("rms",dependencies = TRUE)
#install.packages("Hmisc")
#
library(ggplot2);
library(Hmisc);
options(prType='html')
v <- c('PClass','Survived','Age','Sex')
titanic <- titanic_df[, v]
describe(titanic)
# # spar(ps=4,rt=3)spar
dd <- datadist(titanic_df)
model  <- glm(Survived ~ PClass + Age + Sex, data = titanic_df, family = binomial())
exp(coef(model))
summary(model)
f <- lrm(Survived ~ Sex + PClass + rcs(Age,6), data=titanic_df)
model4 <-glm(Survived ~ Age*PClass, data = titanic_df, family = binomial)
anova(model4, test="Chisq")
model5 <-glm(Survived ~ Age*Sex , data = titanic_df, family = binomial)
anova(model5, test="Chisq")
# Fit a logistic regression model
model3 <- glm(Survived ~ PClass + Sex + Age:Sex, data = titanic_df, family = "binomial")
summary(model3)
# Create a new dataset with all possible combinations of PClass, Sex, and Age
newdata <- expand.grid(PClass = c("1st", "2nd", "3rd"),
Sex = c("male", "female"),
Age = 55)
# Add a column with predicted survival probabilities
newdata$Survival_Probability <- predict(model3, newdata, type = "response")
head(newdata)
p<- ggplot(newdata, aes(x = PClass, y = Survival_Probability, fill = Sex)) +
geom_bar(stat = "identity", position = "dodge") +
theme_bw()
p + ggtitle("Probability of survival for age 55")
ov = xtabs(Survived~Sex + PClass, data = data)
setwd("~/Documents/GitHub/EDDA_assignment_1/Assignment2")
titanic_df <- read.table("titanic.txt", header=TRUE)
s= xtabs(~Survived + PClass + Sex, titanic_df)
plot(xtabs(~Survived + PClass + Sex, titanic_df))
s
ov = xtabs(Survived~Sex + PClass, data = titanic_df)
rowsums = apply(ov, 1, sum); colsums = apply(ov, 2, sum)
total = sum(ov); expected = (rowsums%*%t(colsums)) / total
round(expected, 0)
sum((ov - expected)^2 / expected)
o=xtabs(Survived~Sex+PClass, data=titanic_df)
rowsums=apply(ov,1,sum); colsums=apply(o,2,sum)
total=sum(o); expected=(rowsums%*%t(colsums))/total
round(expected,0)
sum((o-expected)^2/expected)
1 - pchisq(7.430557, 6)
z = chisq.test(ov); z
o=xtabs(Survived~Sex+PClass, data=titanic_df)
rowsums=apply(ov,1,sum); colsums=apply(o,2,sum)
total=sum(o); expected=(rowsums%*%t(colsums))/total
round(expected,0)
sum((o-expected)^2/expected)
1 - pchisq(7.430557, 6)
1 - pchisq(7.430557, 6)
z = chisq.test(ov); z
o=xtabs(Survived~Sex+PClass, data=titanic_df)
rowsums=apply(o,1,sum); colsums=apply(o,2,sum)
total=sum(o); expected=(rowsums%*%t(colsums))/total
round(expected,0)
sum((o-expected)^2/expected)
1 - pchisq(7.430557, 6)
z = chisq.test(ov); z
1 - pchisq(7.430557, 6)
z = chisq.test(ov)
z
1 - pchisq(7.430557, 6)
z = chisq.test(o)
z
1 - pchisq(7.430557, 6)
z = chisq.test(o)
z
x=xtabs(Survived~Sex+PClass, data=titanic_df)
rowsums=apply(x,1,sum); colsums=apply(x,2,sum)
total=sum(x); expected=(rowsums%*%t(colsums))/total
round(expected,0)
sum((x-expected)^2/expected)
1 - pchisq(7.430557, 6)
z = chisq.test(x)
z
x=xtabs(Survived~Sex+PClass, data=titanic_df)
rowsums=apply(x,1,sum); colsums=apply(x,2,sum)
total=sum(x); expected=(rowsums%*%t(colsums))/total
round(expected,0)
sum((x-expected)^2/expected)
sum
x=xtabs(Survived~Sex+PClass, data=titanic_df)
rowsums=apply(x,1,sum); colsums=apply(x,2,sum)
total=sum(x); expected=(rowsums%*%t(colsums))/total
round(expected,0)
y=sum((x-expected)^2/expected)
y
sum((x-expected)^2/expected)
x=xtabs(Survived~Sex+PClass, data=titanic_df)
rowsums=apply(x,1,sum); colsums=apply(x,2,sum)
total=sum(x); expected=(rowsums%*%t(colsums))/total
round(expected,0)
sum((x-expected)^2/expected)
conttest=xtabs(Survived~Sex+PClass, data=titanic_df)
rowsums=apply(conttest,1,sum); colsums=apply(conttest,2,sum)
total=sum(conttest); expected=(rowsums%*%t(colsums))/total
round(expected,0)
sum((conttest-expected)^2/expected)
1-pchisq() #can someone check this one
#1-pchisq() #can someone check this one
z=chisq.test(x)
z
#1-pchisq() #can someone check this one
z=chisq.test(conttest)
z
